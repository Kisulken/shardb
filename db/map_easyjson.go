// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package db

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson5b870168DecodeShardbDb(in *jlexer.Lexer, out *Tuple) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Key":
			out.Key = string(in.String())
		case "Val":
			if m, ok := out.Val.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Val.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Val = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5b870168EncodeShardbDb(out *jwriter.Writer, in Tuple) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Key\":")
	out.String(string(in.Key))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Val\":")
	if m, ok := in.Val.(easyjson.Marshaler); ok {
		m.MarshalEasyJSON(out)
	} else if m, ok := in.Val.(json.Marshaler); ok {
		out.Raw(m.MarshalJSON())
	} else {
		out.Raw(json.Marshal(in.Val))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Tuple) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5b870168EncodeShardbDb(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Tuple) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5b870168EncodeShardbDb(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Tuple) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5b870168DecodeShardbDb(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Tuple) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5b870168DecodeShardbDb(l, v)
}
func easyjson5b870168DecodeShardbDb1(in *jlexer.Lexer, out *ShardOffset) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5b870168EncodeShardbDb1(out *jwriter.Writer, in ShardOffset) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ShardOffset) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5b870168EncodeShardbDb1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ShardOffset) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5b870168EncodeShardbDb1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ShardOffset) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5b870168DecodeShardbDb1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ShardOffset) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5b870168DecodeShardbDb1(l, v)
}
func easyjson5b870168DecodeShardbDb2(in *jlexer.Lexer, out *ConcurrentMapShared) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5b870168EncodeShardbDb2(out *jwriter.Writer, in ConcurrentMapShared) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ConcurrentMapShared) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5b870168EncodeShardbDb2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ConcurrentMapShared) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5b870168EncodeShardbDb2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ConcurrentMapShared) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5b870168DecodeShardbDb2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ConcurrentMapShared) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5b870168DecodeShardbDb2(l, v)
}
func easyjson5b870168DecodeShardbDb3(in *jlexer.Lexer, out *ConcurrentMap) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Shared":
			if in.IsNull() {
				in.Skip()
				out.Shared = nil
			} else {
				in.Delim('[')
				if out.Shared == nil {
					if !in.IsDelim(']') {
						out.Shared = make([]*ConcurrentMapShared, 0, 8)
					} else {
						out.Shared = []*ConcurrentMapShared{}
					}
				} else {
					out.Shared = (out.Shared)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *ConcurrentMapShared
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(ConcurrentMapShared)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Shared = append(out.Shared, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5b870168EncodeShardbDb3(out *jwriter.Writer, in ConcurrentMap) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Shared\":")
	if in.Shared == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in.Shared {
			if v2 > 0 {
				out.RawByte(',')
			}
			if v3 == nil {
				out.RawString("null")
			} else {
				(*v3).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ConcurrentMap) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5b870168EncodeShardbDb3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ConcurrentMap) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5b870168EncodeShardbDb3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ConcurrentMap) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5b870168DecodeShardbDb3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ConcurrentMap) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5b870168DecodeShardbDb3(l, v)
}
