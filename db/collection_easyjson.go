// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package db

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson31a05f68DecodeShardbDb(in *jlexer.Lexer, out *IndexData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Field":
			out.Field = string(in.String())
		case "Data":
			out.Data = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson31a05f68EncodeShardbDb(out *jwriter.Writer, in IndexData) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Field\":")
	out.String(string(in.Field))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Data\":")
	out.String(string(in.Data))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IndexData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson31a05f68EncodeShardbDb(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IndexData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson31a05f68EncodeShardbDb(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IndexData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson31a05f68DecodeShardbDb(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IndexData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson31a05f68DecodeShardbDb(l, v)
}
func easyjson31a05f68DecodeShardbDb1(in *jlexer.Lexer, out *Index) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Field":
			out.Field = string(in.String())
		case "Unique":
			out.Unique = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson31a05f68EncodeShardbDb1(out *jwriter.Writer, in Index) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Field\":")
	out.String(string(in.Field))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Unique\":")
	out.Bool(bool(in.Unique))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Index) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson31a05f68EncodeShardbDb1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Index) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson31a05f68EncodeShardbDb1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Index) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson31a05f68DecodeShardbDb1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Index) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson31a05f68DecodeShardbDb1(l, v)
}
func easyjson31a05f68DecodeShardbDb2(in *jlexer.Lexer, out *Element) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "x":
			out.Id = string(in.String())
		case "p":
			if m, ok := out.Payload.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Payload.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Payload = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson31a05f68EncodeShardbDb2(out *jwriter.Writer, in Element) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"x\":")
	out.String(string(in.Id))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"p\":")
	if m, ok := in.Payload.(easyjson.Marshaler); ok {
		m.MarshalEasyJSON(out)
	} else if m, ok := in.Payload.(json.Marshaler); ok {
		out.Raw(m.MarshalJSON())
	} else {
		out.Raw(json.Marshal(in.Payload))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Element) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson31a05f68EncodeShardbDb2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Element) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson31a05f68EncodeShardbDb2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Element) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson31a05f68DecodeShardbDb2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Element) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson31a05f68DecodeShardbDb2(l, v)
}
func easyjson31a05f68DecodeShardbDb3(in *jlexer.Lexer, out *Collection) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "Map":
			if in.IsNull() {
				in.Skip()
				out.Map = nil
			} else {
				if out.Map == nil {
					out.Map = new(ConcurrentMap)
				}
				(*out.Map).UnmarshalEasyJSON(in)
			}
		case "Indexes":
			if in.IsNull() {
				in.Skip()
				out.Indexes = nil
			} else {
				in.Delim('[')
				if out.Indexes == nil {
					if !in.IsDelim(']') {
						out.Indexes = make([]*Index, 0, 8)
					} else {
						out.Indexes = []*Index{}
					}
				} else {
					out.Indexes = (out.Indexes)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *Index
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Index)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Indexes = append(out.Indexes, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson31a05f68EncodeShardbDb3(out *jwriter.Writer, in Collection) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Name\":")
	out.String(string(in.Name))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Map\":")
	if in.Map == nil {
		out.RawString("null")
	} else {
		(*in.Map).MarshalEasyJSON(out)
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Indexes\":")
	if in.Indexes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in.Indexes {
			if v2 > 0 {
				out.RawByte(',')
			}
			if v3 == nil {
				out.RawString("null")
			} else {
				(*v3).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Collection) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson31a05f68EncodeShardbDb3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Collection) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson31a05f68EncodeShardbDb3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Collection) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson31a05f68DecodeShardbDb3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Collection) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson31a05f68DecodeShardbDb3(l, v)
}
